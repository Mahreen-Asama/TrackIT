@{
    ViewData["Title"] = "Dashboard";
}
@*<p id="test_id"></p>*@
<div class="wrapper">
    <div class="content-wrapper" style="margin-top: 0px;">
    <!-- Content Header (Page header) -->
    <section class="content-header">
      <div class="container-fluid">
        <div class="row mb-2">
          <div class="col-sm-6">
            <h1>Dashboard</h1>
          </div>
          <div class="col-sm-6">
            <ol class="breadcrumb float-sm-right">
              <li class="breadcrumb-item"><a href="#">Home</a></li>
              <li class="breadcrumb-item active"><a asp-controller="Flow" asp-action="index">Website Flows</a></li>
            </ol>
          </div>
        </div>
      </div><!-- /.container-fluid -->
    </section>
    <!-- /.content-header -->

    <!-- Main content -->
    <section class="content">
      <div class="container-fluid">
        <!-- Info boxes -->
        <div class="row">
          <div class="col-12 col-sm-6 col-md-3">
            <div class="info-box">
              <span class="info-box-icon bg-info elevation-1"><i class="fas fa-users"></i></span>

              <div class="info-box-content">
                <span class="info-box-text">Total Visitors</span>
                <span id="totalvisitors" class="info-box-number">@ViewBag.AllUsers</span>
              </div>
              <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
          </div>
          <!-- /.col -->
          <div class="col-12 col-sm-6 col-md-3">
            <div class="info-box mb-3">
              <span class="info-box-icon bg-danger elevation-1"><i class="fa fa-user-plus"></i></span>

              <div class="info-box-content">
                <span class="info-box-text">New Visitors</span>
                <span id="newvisitors" class="info-box-number">@ViewBag.NewUsers</span>
              </div>
              <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
          </div>
          <!-- /.col -->

          <!-- fix for small devices only -->
          

          <div class="col-12 col-sm-6 col-md-3">
            <div class="info-box mb-3">
              <span class="info-box-icon bg-success elevation-1"><i class="fa fa-id-badge"></i></span>

              <div class="info-box-content">
                <span class="info-box-text">Returning Visitors</span>
                <span id="returningvisitors" class="info-box-number">@ViewBag.RetUsers</span>
              </div>
              <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
          </div>
          <!-- /.col -->
          <div class="col-12 col-sm-6 col-md-3">
            <div class="info-box mb-3">
              <span class="info-box-icon bg-warning elevation-1"><i class="fa fa-mouse-pointer" style="color:white;"></i></span>

              <div class="info-box-content">
                <span class="info-box-text">Actions</span>
                                    <span id="actionscount" class="info-box-number">@ViewBag.actionsCount</span>
              </div>
              <!-- /.info-box-content -->
            </div>
            <!-- /.info-box -->
          </div>
          <!-- /.col -->
        </div>
        <!-- /.row -->

        <div class="row">
          <div class="col-12">
            <!-- interactive chart -->
            <div class="card card-primary card-outline">
              <div class="card-header">
                <h3 class="card-title">
                  <i class="far fa-chart-bar"></i>
                  Live Visitors Data
                </h3>
              </div>
              <div class="card-body">
                <div id="chartdiv1"></div>
              </div>
              <!-- /.card-body-->
            </div>
            <!-- /.card -->

          </div>
          <!-- /.col -->
        </div>
        <div class="row">
          <div class="col-12 col-md-6">
            <!-- interactive chart -->
            <div class="card card-primary card-outline">
              <div class="card-header">
                <h3 class="card-title">
                  <i class="far fa-chart-bar"></i>
                  Visitors Rigons
                </h3>
              </div>
              <div class="card-body">
                <div id="chartdiv"></div>
              </div>
              <!-- /.card-body-->
            </div>
            <!-- /.card -->

          </div>
                    <div class="col-12 col-md-6">
            <!-- interactive chart -->
            <div class="card card-primary card-outline">
              <div class="card-header">
                <h3 class="card-title">
                  <i class="far fa-chart-bar"></i>
                  Browsers
                </h3>
              </div>
              <div class="card-body">
                <div id="chartdiv2"></div>
              </div>
              <!-- /.card-body-->
            </div>
            <!-- /.card -->

          </div>
          <!-- /.col -->
        </div>
        <div class="row">
                    <div class="col-12 col-md-6">
            <!-- interactive chart -->
            <div class="card card-primary card-outline">
              <div class="card-header">
                <h3 class="card-title">
                  <i class="far fa-chart-bar"></i>
                  Devices
                </h3>
              </div>
              <div class="card-body">
                <div id="deviceChart"></div>
              </div>
              <!-- /.card-body-->
            </div>
            <!-- /.card -->

          </div>
                    <div class="col-12 col-md-6">
            <!-- interactive chart -->
            <div class="card card-primary card-outline">
              <div class="card-header">
                <h3 class="card-title">
                  <i class="far fa-chart-bar"></i>
                  Operating Systems 
                </h3>
              </div>
              <div class="card-body">
                <div id="osChart"></div>
              </div>
              <!-- /.card-body-->
            </div>
            <!-- /.card -->

          </div>
          <!-- /.col -->
        </div>
      </div><!--/. container-fluid -->
    </section>
    <!-- /.content -->
  </div>
</div>
<script src="~/js/microsoft/signalr/dist/browser/signalr.js"></script>
<script src="~/js/AutoUpdater.js"></script>
<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/map.js"></script>
<script src="https://cdn.amcharts.com/lib/5/geodata/worldLow.js"></script>
<script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>
<script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
<script>
  am5.ready(function() {
  
  // Create root element
  // https://www.amcharts.com/docs/v5/getting-started/#Root_element
  var root = am5.Root.new("chartdiv");
  
  
  // Set themes
  // https://www.amcharts.com/docs/v5/concepts/themes/
  root.setThemes([
    am5themes_Animated.new(root)
  ]);
  
  
  // Create the map chart
  // https://www.amcharts.com/docs/v5/charts/map-chart/
  var chart = root.container.children.push(am5map.MapChart.new(root, {
    panX: "rotateX",
    panY: "rotateY",
    projection: am5map.geoOrthographic()
  }));
  
  
  // Create series for background fill
  // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/#Background_polygon
  var backgroundSeries = chart.series.push(
    am5map.MapPolygonSeries.new(root, {})
  );
  backgroundSeries.mapPolygons.template.setAll({
    fill: root.interfaceColors.get("alternativeBackground"),
    fillOpacity: 0.1,
    strokeOpacity: 0
  });
  backgroundSeries.data.push({
    geometry:
      am5map.getGeoRectangle(90, 180, -90, -180)
  });
  
  
  // Create main polygon series for countries
  // https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/
  var polygonSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {
    geoJSON: am5geodata_worldLow 
  }));
  polygonSeries.mapPolygons.template.setAll({
    fill: root.interfaceColors.get("alternativeBackground"),
    fillOpacity: 0.15,
    strokeWidth: 1,
    stroke: root.interfaceColors.get("background")
  });
  
  
  // Create polygon series for projected circles
  var circleSeries = chart.series.push(am5map.MapPolygonSeries.new(root, {}));
  circleSeries.mapPolygons.template.setAll({
    templateField: "polygonTemplate",
    tooltipText: "{name}:{value}"
  });
  
  // Define data
  var colors = am5.ColorSet.new(root, {});
            
  var data = [
    { "id": "AF", "name": "Afghanistan", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "AL", "name": "Albania", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "DZ", "name": "Algeria", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "AO", "name": "Angola", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "AR", "name": "Argentina", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "AM", "name": "Armenia", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "AU", "name": "Australia", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "AT", "name": "Austria", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "AZ", "name": "Azerbaijan", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "BH", "name": "Bahrain", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "BD", "name": "Bangladesh", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "BY", "name": "Belarus", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "BE", "name": "Belgium", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "BJ", "name": "Benin", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "BT", "name": "Bhutan", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "BO", "name": "Bolivia", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "BA", "name": "Bosnia and Herzegovina", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "BW", "name": "Botswana", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "BR", "name": "Brazil", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "BN", "name": "Brunei", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "BG", "name": "Bulgaria", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "BF", "name": "Burkina Faso", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "BI", "name": "Burundi", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "KH", "name": "Cambodia", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "CM", "name": "Cameroon", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "CA", "name": "Canada", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "CV", "name": "Cape Verde", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "CF", "name": "Central African Rep.", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "TD", "name": "Chad", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "CL", "name": "Chile", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "CN", "name": "China", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "CO", "name": "Colombia", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "KM", "name": "Comoros", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "CD", "name": "Congo, Dem. Rep.", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "CG", "name": "Congo, Rep.", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "CR", "name": "Costa Rica", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "CI", "name": "Cote d'Ivoire", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "HR", "name": "Croatia", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "CU", "name": "Cuba", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "CY", "name": "Cyprus", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "CZ", "name": "Czech Rep.", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "DK", "name": "Denmark", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "DJ", "name": "Djibouti", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "DO", "name": "Dominican Rep.", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "EC", "name": "Ecuador", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "EG", "name": "Egypt", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "SV", "name": "El Salvador", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "GQ", "name": "Equatorial Guinea", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "ER", "name": "Eritrea", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "EE", "name": "Estonia", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "ET", "name": "Ethiopia", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "FJ", "name": "Fiji", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "FI", "name": "Finland", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "FR", "name": "France", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "GA", "name": "Gabon", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "GM", "name": "Gambia", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "GE", "name": "Georgia", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "DE", "name": "Germany", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "GH", "name": "Ghana", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "GR", "name": "Greece", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "GT", "name": "Guatemala", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "GN", "name": "Guinea", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "GW", "name": "Guinea-Bissau", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "GY", "name": "Guyana", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "HT", "name": "Haiti", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "HN", "name": "Honduras", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "HK", "name": "Hong Kong, China", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "HU", "name": "Hungary", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "IS", "name": "Iceland", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "IN", "name": "India", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "ID", "name": "Indonesia", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "IR", "name": "Iran", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "IQ", "name": "Iraq", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "IE", "name": "Ireland", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "IL", "name": "Israel", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "IT", "name": "Italy", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "JM", "name": "Jamaica", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "JP", "name": "Japan", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "JO", "name": "Jordan", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "KZ", "name": "Kazakhstan", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "KE", "name": "Kenya", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "KP", "name": "Korea, Dem. Rep.", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "KR", "name": "Korea, Rep.", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "KW", "name": "Kuwait", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "KG", "name": "Kyrgyzstan", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "LA", "name": "Laos", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "LV", "name": "Latvia", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "LB", "name": "Lebanon", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "LS", "name": "Lesotho", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "LR", "name": "Liberia", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "LY", "name": "Libya", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "LT", "name": "Lithuania", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "LU", "name": "Luxembourg", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "MK", "name": "Macedonia, FYR", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "MG", "name": "Madagascar", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "MW", "name": "Malawi", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "MY", "name": "Malaysia", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "ML", "name": "Mali", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "MR", "name": "Mauritania", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "MU", "name": "Mauritius", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "MX", "name": "Mexico", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "MD", "name": "Moldova", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "MN", "name": "Mongolia", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "ME", "name": "Montenegro", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "MA", "name": "Morocco", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "MZ", "name": "Mozambique", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "MM", "name": "Myanmar", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "NA", "name": "Namibia", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "NP", "name": "Nepal", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "NL", "name": "Netherlands", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "NZ", "name": "New Zealand", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "NI", "name": "Nicaragua", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "NE", "name": "Niger", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "NG", "name": "Nigeria", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "NO", "name": "Norway", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "OM", "name": "Oman", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "PK", "name": "Pakistan", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "PA", "name": "Panama", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "PG", "name": "Papua New Guinea", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "PY", "name": "Paraguay", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "PE", "name": "Peru", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "PH", "name": "Philippines", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "PL", "name": "Poland", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "PT", "name": "Portugal", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "PR", "name": "Puerto Rico", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "QA", "name": "Qatar", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "RO", "name": "Romania", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "RU", "name": "Russia", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "RW", "name": "Rwanda", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "SA", "name": "Saudi Arabia", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "SN", "name": "Senegal", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "RS", "name": "Serbia", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "SL", "name": "Sierra Leone", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "SG", "name": "Singapore", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "SK", "name": "Slovak Republic", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "SI", "name": "Slovenia", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "SB", "name": "Solomon Islands", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "SO", "name": "Somalia", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "ZA", "name": "South Africa", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "ES", "name": "Spain", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "LK", "name": "Sri Lanka", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "SD", "name": "Sudan", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "SR", "name": "Suriname", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "SZ", "name": "Swaziland", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "SE", "name": "Sweden", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "CH", "name": "Switzerland", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "SY", "name": "Syria", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "TW", "name": "Taiwan", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "TJ", "name": "Tajikistan", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "TZ", "name": "Tanzania", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "TH", "name": "Thailand", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "TG", "name": "Togo", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "TT", "name": "Trinidad and Tobago", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "TN", "name": "Tunisia", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "TR", "name": "Turkey", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "TM", "name": "Turkmenistan", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "UG", "name": "Uganda", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "UA", "name": "Ukraine", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "AE", "name": "United Arab Emirates", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "GB", "name": "United Kingdom", "value": 0, polygonTemplate: { fill: colors.getIndex(8) } },
    { "id": "US", "name": "United States", "value": 0, polygonTemplate: { fill: colors.getIndex(4) } },
    { "id": "UY", "name": "Uruguay", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "UZ", "name": "Uzbekistan", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "VE", "name": "Venezuela", "value": 0, polygonTemplate: { fill: colors.getIndex(3) } },
    { "id": "PS", "name": "West Bank and Gaza", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "VN", "name": "Vietnam", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "YE", "name": "Yemen, Rep.", "value": 0, polygonTemplate: { fill: colors.getIndex(0) } },
    { "id": "ZM", "name": "Zambia", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } },
    { "id": "ZW", "name": "Zimbabwe", "value": 0, polygonTemplate: { fill: colors.getIndex(2) } }
  ];
  var d = @Html.Raw(Json.Serialize(ViewBag.AInfo));
  for(var i=0; i<d.length; i++){
      var v=data.findIndex(obj=>obj.name==d[i].name+"");
      if(v>0)
      {  
        data[v].value=parseInt(d[i].value);
      }
  }
            
  var valueLow = Infinity;
  var valueHigh = -Infinity;
  
  for (var i = 0; i < data.length; i++) {
    var value = data[i].value;
    if (value < valueLow) {
      valueLow = value;
    }
    if (value > valueHigh) {
      valueHigh = value;
    }
  }
  
  // radius in degrees
  var minRadius = 0.5;
  var maxRadius = 5;
  
  // Create circles when data for countries is fully loaded.
  polygonSeries.events.on("datavalidated", function () {
    circleSeries.data.clear();
  
    for (var i = 0; i < data.length; i++) {
      var dataContext = data[i];
      var countryDataItem = polygonSeries.getDataItemById(dataContext.id);
      var countryPolygon = countryDataItem.get("mapPolygon");
  
      var value = dataContext.value;
  
      var radius = minRadius + maxRadius * (value - valueLow) / (valueHigh - valueLow);
  
      if (countryPolygon) {
        var geometry = am5map.getGeoCircle(countryPolygon.visualCentroid(), radius);
        circleSeries.data.push({
          name: dataContext.name,
          value: dataContext.value,
          polygonTemplate: dataContext.polygonTemplate,
          geometry: geometry
        });
      }
    }
  })
  
  
  // Make stuff animate on load
  chart.appear(1000, 100);
  connection.on("RegionData", (regiondata) => {
    var d2 = regiondata;
    console.log(d2);
    console.log(data);
    for(var i=0; i<d2.length; i++){
      var v=data.findIndex(obj=>obj.name==d2[i].name+"");
      data[v].value=parseInt(d2[i].value);
    }
    for (var i = 0; i < data.length; i++) {
        var value = data[i].value;
    
        if (value < valueLow) {
      
            valueLow = value;
    
        }
    
        if (value > valueHigh) {
      
            valueHigh = value;
    
        }
  
    }
  
  
    // radius in degrees
  
    var minRadius = 0.5;
  
    var maxRadius = 5;
  
    // Create circles when data for countries is fully loaded.
        circleSeries.data.clear();
        
        for (var i = 0; i < data.length; i++) {
            
            var dataContext = data[i];
            
            var countryDataItem = polygonSeries.getDataItemById(dataContext.id);
      
            var countryPolygon = countryDataItem.get("mapPolygon");
  
      
            var value = dataContext.value;
  
      
            var radius = minRadius + maxRadius * (value - valueLow) / (valueHigh - valueLow);
  
      
            if (countryPolygon) {
        
                var geometry = am5map.getGeoCircle(countryPolygon.visualCentroid(), radius);
        
                circleSeries.data.push({
          
                    name: dataContext.name,
          
                    value: dataContext.value,
          
                    polygonTemplate: dataContext.polygonTemplate,
          
                    geometry: geometry
        
                });
      
            }
    
        }
  
  });
  
}); // end am5.ready()
</script>
<script>
am5.ready(function() {

// Create root element
// https://www.amcharts.com/docs/v5/getting-started/#Root_element
var root = am5.Root.new("chartdiv1");


// Set themes
// https://www.amcharts.com/docs/v5/concepts/themes/
root.setThemes([
  am5themes_Animated.new(root)
]);

root.dateFormatter.setAll({
  dateFormat: "yyyy",
  dateFields: ["valueX"]
});

var data = @Html.Raw(Json.Serialize(ViewBag.DAInfo));

// Create chart
// https://www.amcharts.com/docs/v5/charts/xy-chart/
var chart = root.container.children.push(am5xy.XYChart.new(root, {
  focusable: true,
  panX: true,
  panY: true,
  wheelX: "panX",
  wheelY: "zoomX",
  pinchZoomX:true
}));

var easing = am5.ease.linear;


// Create axes
// https://www.amcharts.com/docs/v5/charts/xy-chart/axes/
var xAxis = chart.xAxes.push(am5xy.DateAxis.new(root, {
  maxDeviation: 0.1,
  groupData: false,
  baseInterval: {
    timeUnit: "day",
    count: 1
  },
  renderer: am5xy.AxisRendererX.new(root, {

  }),
  tooltip: am5.Tooltip.new(root, {})
}));

var yAxis = chart.yAxes.push(am5xy.ValueAxis.new(root, {
  maxDeviation: 0.2,
  renderer: am5xy.AxisRendererY.new(root, {})
}));


// Add series
// https://www.amcharts.com/docs/v5/charts/xy-chart/series/
var series = chart.series.push(am5xy.LineSeries.new(root, {
  minBulletDistance: 10,
  connect: false,
  xAxis: xAxis,
  yAxis: yAxis,
  valueYField: "value",
  valueXField: "date",
  tooltip: am5.Tooltip.new(root, {
    pointerOrientation: "horizontal",
    labelText: "{valueY}"
  })
}));

series.fills.template.setAll({
  fillOpacity: 0.2,
  visible: true
});

series.strokes.template.setAll({
  strokeWidth: 2
});


// Set up data processor to parse string dates
// https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data
series.data.processor = am5.DataProcessor.new(root, {
  dateFormat: "yyyy-MM-dd",
  dateFields: ["date"]
});

series.data.setAll(data);

series.bullets.push(function() {
  var circle = am5.Circle.new(root, {
    radius: 4,
    fill: root.interfaceColors.get("background"),
    stroke: series.get("fill"),
    strokeWidth: 2
  })

  return am5.Bullet.new(root, {
    sprite: circle
  })
});


// Add cursor
// https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/
var cursor = chart.set("cursor", am5xy.XYCursor.new(root, {
  xAxis: xAxis,
  behavior: "none"
}));
cursor.lineY.set("visible", false);

// add scrollbar
chart.set("scrollbarX", am5.Scrollbar.new(root, {
  orientation: "horizontal"
}));


// Make stuff animate on load
// https://www.amcharts.com/docs/v5/concepts/animations/
chart.appear(1000, 100);
connection.on("VisitorData", (visitordata) => {
    var dataupdated = visitordata;
    series.data.setAll(dataupdated);
});
}); // end am5.ready()

</script>
<script>
    am5.ready(function() {
    
    // Create root element
    // https://www.amcharts.com/docs/v5/getting-started/#Root_element
    var root = am5.Root.new("chartdiv2");
    
    
    // Set themes
    // https://www.amcharts.com/docs/v5/concepts/themes/
    root.setThemes([
      am5themes_Animated.new(root)
    ]);
    
    
    // Create chart
    // https://www.amcharts.com/docs/v5/charts/xy-chart/
    var chart = root.container.children.push(am5xy.XYChart.new(root, {
      panX: true,
      panY: true,
      wheelX: "panX",
      wheelY: "zoomX",
      pinchZoomX:true
    }));
    
    // Add cursor
    // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/
    var cursor = chart.set("cursor", am5xy.XYCursor.new(root, {}));
    cursor.lineY.set("visible", false);
    
    
    // Create axes
    // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/
    var xRenderer = am5xy.AxisRendererX.new(root, { minGridDistance: 30 });
    xRenderer.labels.template.setAll({
      rotation: -90,
      centerY: am5.p50,
      centerX: am5.p100,
      paddingRight: 15
    });
    
    var xAxis = chart.xAxes.push(am5xy.CategoryAxis.new(root, {
      maxDeviation: 0.3,
      categoryField: "country",
      renderer: xRenderer,
      tooltip: am5.Tooltip.new(root, {})
    }));
    
    var yAxis = chart.yAxes.push(am5xy.ValueAxis.new(root, {
      maxDeviation: 0.3,
      renderer: am5xy.AxisRendererY.new(root, {})
    }));
    
    
    // Create series
    // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
    var series = chart.series.push(am5xy.ColumnSeries.new(root, {
      name: "Series 1",
      xAxis: xAxis,
      yAxis: yAxis,
      valueYField: "value",
      sequencedInterpolation: true,
      categoryXField: "country",
      tooltip: am5.Tooltip.new(root, {
        labelText:"{valueY}"
      })
    }));
    
    series.columns.template.setAll({ cornerRadiusTL: 5, cornerRadiusTR: 5 });
    series.columns.template.adapters.add("fill", function(fill, target) {
      return chart.get("colors").getIndex(series.columns.indexOf(target));
    });
    
    series.columns.template.adapters.add("stroke", function(stroke, target) {
      return chart.get("colors").getIndex(series.columns.indexOf(target));
    });
    var data = @Html.Raw(Json.Serialize(ViewBag.BInfo));
    
    xAxis.data.setAll(data);
    series.data.setAll(data);
    
    
    // Make stuff animate on load
    // https://www.amcharts.com/docs/v5/concepts/animations/
    series.appear(1000);
    chart.appear(1000, 100);
    connection.on("BroswerData", (browserdata) => {
        var dataupdated = browserdata;
        xAxis.data.setAll(dataupdated);
        series.data.setAll(dataupdated);
    });
    }); // end am5.ready()
    </script>  
    <script>
    am5.ready(function() {
    
    // Create root element
    // https://www.amcharts.com/docs/v5/getting-started/#Root_element
    var root = am5.Root.new("deviceChart");
    
    // Set themes
    // https://www.amcharts.com/docs/v5/concepts/themes/
    root.setThemes([
      am5themes_Animated.new(root)
    ]);
    
    // Create chart
    // https://www.amcharts.com/docs/v5/charts/xy-chart/
    var chart = root.container.children.push(am5xy.XYChart.new(root, {
      panX: false,
      panY: false,
      wheelX: "none",
      wheelY: "none"
    }));
    
    // Add cursor
    // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/
    var cursor = chart.set("cursor", am5xy.XYCursor.new(root, {}));
    cursor.lineY.set("visible", false);
    
    // Create axes
    // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/
    var xRenderer = am5xy.AxisRendererX.new(root, { minGridDistance: 30 });
    
    var xAxis = chart.xAxes.push(am5xy.CategoryAxis.new(root, {
      maxDeviation: 0,
      categoryField: "name",
      renderer: xRenderer,
      tooltip: am5.Tooltip.new(root, {})
    }));
    
    xRenderer.grid.template.set("visible", false);
    
    var yRenderer = am5xy.AxisRendererY.new(root, {});
    var yAxis = chart.yAxes.push(am5xy.ValueAxis.new(root, {
      maxDeviation: 0,
      min: 0,
      extraMax: 0.1,
      renderer: yRenderer
    }));
    
    yRenderer.grid.template.setAll({
      strokeDasharray: [2, 2]
    });
    
    // Create series
    // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
    var series = chart.series.push(am5xy.ColumnSeries.new(root, {
      name: "Series 1",
      xAxis: xAxis,
      yAxis: yAxis,
      valueYField: "value",
      sequencedInterpolation: true,
      categoryXField: "name",
      tooltip: am5.Tooltip.new(root, { dy: -25, labelText: "{valueY}" })
    }));
    
    
    series.columns.template.setAll({
      cornerRadiusTL: 5,
      cornerRadiusTR: 5
    });
    
    series.columns.template.adapters.add("fill", (fill, target) => {
      return chart.get("colors").getIndex(series.columns.indexOf(target));
    });
    
    series.columns.template.adapters.add("stroke", (stroke, target) => {
      return chart.get("colors").getIndex(series.columns.indexOf(target));
    });
    var data = @Html.Raw(Json.Serialize(ViewBag.DInfo));
    series.bullets.push(function() {
      return am5.Bullet.new(root, {
        locationY: 1,
        sprite: am5.Picture.new(root, {
          templateField: "bulletSettings",
          width: 50,
          height: 50,
          centerX: am5.p50,
          centerY: am5.p50,
          shadowColor: am5.color(0x000000),
          shadowBlur: 4,
          shadowOffsetX: 4,
          shadowOffsetY: 4,
          shadowOpacity: 0.6
        })
      });
    });
    
    xAxis.data.setAll(data);
    series.data.setAll(data);
    
    // Make stuff animate on load
    // https://www.amcharts.com/docs/v5/concepts/animations/
    series.appear(1000);
    chart.appear(1000, 100);
    connection.on("DeviceData", (devicedata) => {
        var dataupdated = devicedata;
        xAxis.data.setAll(dataupdated);
        series.data.setAll(dataupdated);
    });
    }); // end am5.ready()
    </script>
    <script>
      am5.ready(function() {
      
      // Create root element
      // https://www.amcharts.com/docs/v5/getting-started/#Root_element
      var root = am5.Root.new("osChart");
      
      // Set themes
      // https://www.amcharts.com/docs/v5/concepts/themes/
      root.setThemes([
        am5themes_Animated.new(root)
      ]);
      
      // Create chart
      // https://www.amcharts.com/docs/v5/charts/xy-chart/
      var chart = root.container.children.push(
        am5xy.XYChart.new(root, {
          panX: true,
          panY: true,
          wheelX: "panX",
          wheelY: "zoomX"
        })
      );
      
      // Add cursor
      // https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/
      var cursor = chart.set("cursor", am5xy.XYCursor.new(root, {}));
      cursor.lineY.set("visible", false);
      
      // Create axes
      // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/
      var xRenderer = am5xy.AxisRendererX.new(root, { minGridDistance: 30 });
      
      var xAxis = chart.xAxes.push(
        am5xy.CategoryAxis.new(root, {
          maxDeviation: 0.3,
          categoryField: "country",
          renderer: xRenderer,
          tooltip: am5.Tooltip.new(root, {})
        })
      );
      
      var yAxis = chart.yAxes.push(
        am5xy.ValueAxis.new(root, {
          maxDeviation: 0.3,
          renderer: am5xy.AxisRendererY.new(root, {})
        })
      );
      
      // Create series
      // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
      var series = chart.series.push(
        am5xy.ColumnSeries.new(root, {
          name: "Series 1",
          xAxis: xAxis,
          yAxis: yAxis,
          valueYField: "value",
          sequencedInterpolation: true,
          categoryXField: "country"
        })
      );
      
      series.columns.template.setAll({
        width: am5.percent(120),
        fillOpacity: 0.9,
        strokeOpacity: 0
      });
      series.columns.template.adapters.add("fill", (fill, target) => {
        return chart.get("colors").getIndex(series.columns.indexOf(target));
      });
      
      series.columns.template.adapters.add("stroke", (stroke, target) => {
        return chart.get("colors").getIndex(series.columns.indexOf(target));
      });
      
      series.columns.template.set("draw", function (display, target) {
        var w = target.getPrivate("width", 0);
        var h = target.getPrivate("height", 0);
        display.moveTo(0, h);
        display.bezierCurveTo(w / 4, h, w / 4, 0, w / 2, 0);
        display.bezierCurveTo(w - w / 4, 0, w - w / 4, h, w, h);
      });
      var data = @Html.Raw(Json.Serialize(ViewBag.OInfo));
      
      xAxis.data.setAll(data);
      series.data.setAll(data);
      
      // Make stuff animate on load
      // https://www.amcharts.com/docs/v5/concepts/animations/
      series.appear(1000);
      chart.appear(1000, 100);
      connection.on("OSData", (osdata) => {
          var dataupdated = osdata; 
          xAxis.data.setAll(dataupdated);
          series.data.setAll(dataupdated);
      });
      }); // end am5.ready()
      </script>